paste('thesis/images', 'garch_first.png', sep='/')
library(tidyverse)
library(lubridate)
library(rugarch)
library(forecast)
my_accuracy <- function(forecast, observed){
accuracy(forecast, observed[(length(observed)-length(forecast)+1):length(observed)])
}
setwd('/home/diogo/Jupyter/tdef')
path <- '/home/diogo/Jupyter/tdef/Res025_ERA5.txt'
data <- read_table2(path, skip=9, comment="--") %>%
tail(-3) %>%
mutate(time=with_tz(ymd_hms(paste(Date, `Time(UTC)`)), tzone='Brazil/East')) %>%
mutate(hour=hour(time), day=date(time), month=month(time,label=TRUE, abbr=FALSE), year=year(time)) %>%
mutate(year_month = paste(year, month)) %>%
rename(speed=c_ws)
hourly.data <- data[(nrow(data)-365*24):nrow(data),]$speed
hourly.data %>% length()
ugarch_spec <- ugarchspec(variance.model = list(model='gjrGARCH', garchOrder = c(1,1)),
mean.model = list(armaOrder = c(1,0), include.mean = T),
distribution.model =  "sstd")
ugarch_spec
#fit <- ugarchfit(spec = ugarch_spec, data = hourly.data)#, solver = 'hybrid')
#defaults: ugarchforecast(fitORspec, data = NULL, n.ahead = 10, n.roll = 0, out.sample = 0)
hourly.data %>% length() #169
forecast.length <- 24*7
modelroll <- ugarchroll (
spec=ugarch_spec, data=hourly.data, n.ahead = 1, forecast.length = forecast.length,
n.start = NULL, refit.every = 50, refit.window = c("recursive"),
window.size = NULL, solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = T, VaR.alpha = c(0.3, 0.7, 0.1, 0.90),
cluster = NULL, keep.coef = F
)
garch_plot <- function(hourly.data, modelroll, title, filename){
measured <- hourly.data[(length(hourly.data)-2*forecast.length):length(hourly.data)-1]
forecast.lower80 <- modelroll@forecast$VaR[,'alpha(30%)']
forecast.lower95 <- modelroll@forecast$VaR[,'alpha(10%)']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$VaR[,'alpha(70%)']
forecast.upper95 <- modelroll@forecast$VaR[,'alpha(90%)']
ggplot.data <- c(measured[1:length(measured)], forecast.mean)
type <- c(rep('measured', length(measured)), rep('forecast', length(forecast.mean)))
time <- c(1:length(measured), (length(measured)-length(forecast.mean)+1):length(measured))
nans <- rep(NA, length(measured))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(measured)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95% level'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80% level'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="fill") +
scale_color_manual(values = c('gold','black'))+
labs(x='Tempo', y='Velocidade (m/s)') +
ggtitle(title)
ggsave(paste('thesis/images', filename, sep='/'))
print(my_accuracy(myforecast, measured))
}
str(modelroll@forecast$VaR)
title <- paste('GARCH(1,1) com janela de 50 horas e passo de 1 hora')
garch_plot(hourly.data, modelroll, title, 'garch_first.png')
era5 <- read_table2(path, skip=9, comment="--")
era5 %>%
tail(-3) %>%
mutate(stamp=with_tz(ymd_hms(paste(Date, `Time(UTC)`)), tzone='Brazil/East')) %>%
mutate(year=year(stamp), month=month(stamp,label=TRUE, abbr=FALSE)) %>%
group_by(year, month) %>%
summarize(speed = mean(c_ws, na.rm = T)) -> monthly.data
monthly.data <- ts(monthly.data$speed, start=c(2000,1), frequency=12)
monthly.data %>% autoplot()
ugarch_spec <- ugarchspec(variance.model = list(model='gjrGARCH', garchOrder = c(1,1)),
mean.model = list(armaOrder = c(1,0), include.mean = T),
distribution.model =  "sstd")
ugarch_spec
#fit <- ugarchfit(spec = ugarch_spec, data = hourly.data)#, solver = 'hybrid')
#defaults: ugarchforecast(fitORspec, data = NULL, n.ahead = 10, n.roll = 0, out.sample = 0)
monthly.data %>% length() #169
forecast.length <- 36
modelroll <- ugarchroll (
spec=ugarch_spec, data=monthly.data, n.ahead = 1, forecast.length = forecast.length,
n.start = NULL, refit.every = 4, refit.window = c("recursive"),
window.size = NULL, solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = T, VaR.alpha = c(0.3, 0.7, 0.1, 0.90),
cluster = NULL, keep.coef = F
)
title <- paste('GARCH(1,1) com janela de 4 meses e passo de 1 mÃªs')
garch_plot(hourly.data, modelroll, title, 'garch_month.png')
garch_plot <- function(data, modelroll, title, filename){
measured <- hourly.data[(length(data)-2*forecast.length):length(data)-1]
forecast.lower80 <- modelroll@forecast$VaR[,'alpha(30%)']
forecast.lower95 <- modelroll@forecast$VaR[,'alpha(10%)']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$VaR[,'alpha(70%)']
forecast.upper95 <- modelroll@forecast$VaR[,'alpha(90%)']
ggplot.data <- c(measured[1:length(measured)], forecast.mean)
type <- c(rep('measured', length(measured)), rep('forecast', length(forecast.mean)))
time <- c(1:length(measured), (length(measured)-length(forecast.mean)+1):length(measured))
nans <- rep(NA, length(measured))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(measured)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95% level'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80% level'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="fill") +
scale_color_manual(values = c('gold','black'))+
labs(x='Tempo', y='Velocidade (m/s)') +
ggtitle(title)
ggsave(paste('thesis/images', filename, sep='/'))
print(my_accuracy(myforecast, measured))
}
str(modelroll@forecast$VaR)
title <- paste('GARCH(1,1) com janela de 50 horas e passo de 1 hora')
garch_plot(hourly.data, modelroll, title, 'garch_first.png')
modelroll <- ugarchroll (
spec=ugarch_spec, data=hourly.data, n.ahead = 1, forecast.length = forecast.length,
n.start = NULL, refit.every = 50, refit.window = c("recursive"),
window.size = NULL, solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = T, VaR.alpha = c(0.3, 0.7, 0.1, 0.90),
cluster = NULL, keep.coef = F
)
garch_plot <- function(data, modelroll, title, filename){
measured <- hourly.data[(length(data)-2*forecast.length):length(data)-1]
forecast.lower80 <- modelroll@forecast$VaR[,'alpha(30%)']
forecast.lower95 <- modelroll@forecast$VaR[,'alpha(10%)']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$VaR[,'alpha(70%)']
forecast.upper95 <- modelroll@forecast$VaR[,'alpha(90%)']
ggplot.data <- c(measured[1:length(measured)], forecast.mean)
type <- c(rep('measured', length(measured)), rep('forecast', length(forecast.mean)))
time <- c(1:length(measured), (length(measured)-length(forecast.mean)+1):length(measured))
nans <- rep(NA, length(measured))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(measured)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95% level'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80% level'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="fill") +
scale_color_manual(values = c('gold','black'))+
labs(x='Tempo', y='Velocidade (m/s)') +
ggtitle(title)
ggsave(paste('thesis/images', filename, sep='/'))
print(my_accuracy(myforecast, measured))
}
str(modelroll@forecast$VaR)
title <- paste('GARCH(1,1) com janela de 50 horas e passo de 1 hora')
garch_plot(hourly.data, modelroll, title, 'garch_first.png')
my_accuracy <- function(forecast, observed){
accuracy(forecast, observed[(length(observed)-length(forecast)+1):length(observed)])
}
setwd('/home/diogo/Jupyter/tdef')
path <- '/home/diogo/Jupyter/tdef/Res025_ERA5.txt'
data <- read_table2(path, skip=9, comment="--") %>%
tail(-3) %>%
mutate(time=with_tz(ymd_hms(paste(Date, `Time(UTC)`)), tzone='Brazil/East')) %>%
mutate(hour=hour(time), day=date(time), month=month(time,label=TRUE, abbr=FALSE), year=year(time)) %>%
mutate(year_month = paste(year, month)) %>%
rename(speed=c_ws)
hourly.data <- data[(nrow(data)-365*24):nrow(data),]$speed
hourly.data %>% length()
ugarch_spec <- ugarchspec(variance.model = list(model='gjrGARCH', garchOrder = c(1,1)),
mean.model = list(armaOrder = c(1,0), include.mean = T),
distribution.model =  "sstd")
ugarch_spec
#fit <- ugarchfit(spec = ugarch_spec, data = hourly.data)#, solver = 'hybrid')
#defaults: ugarchforecast(fitORspec, data = NULL, n.ahead = 10, n.roll = 0, out.sample = 0)
hourly.data %>% length() #169
forecast.length <- 24*7
modelroll <- ugarchroll (
spec=ugarch_spec, data=hourly.data, n.ahead = 1, forecast.length = forecast.length,
n.start = NULL, refit.every = 50, refit.window = c("recursive"),
window.size = NULL, solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = T, VaR.alpha = c(0.3, 0.7, 0.1, 0.90),
cluster = NULL, keep.coef = F
)
garch_plot <- function(data, modelroll, title, filename){
measured <- hourly.data[(length(data)-2*forecast.length):length(data)-1]
forecast.lower80 <- modelroll@forecast$VaR[,'alpha(30%)']
forecast.lower95 <- modelroll@forecast$VaR[,'alpha(10%)']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$VaR[,'alpha(70%)']
forecast.upper95 <- modelroll@forecast$VaR[,'alpha(90%)']
ggplot.data <- c(measured[1:length(measured)], forecast.mean)
type <- c(rep('measured', length(measured)), rep('forecast', length(forecast.mean)))
time <- c(1:length(measured), (length(measured)-length(forecast.mean)+1):length(measured))
nans <- rep(NA, length(measured))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(measured)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95% level'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80% level'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="fill") +
scale_color_manual(values = c('gold','black'))+
labs(x='Tempo', y='Velocidade (m/s)') +
ggtitle(title)
ggsave(paste('thesis/images', filename, sep='/'))
print(my_accuracy(myforecast, measured))
}
str(modelroll@forecast$VaR)
title <- paste('GARCH(1,1) com janela de 50 horas e passo de 1 hora')
garch_plot(hourly.data, modelroll, title, 'garch_first.png')
era5 <- read_table2(path, skip=9, comment="--")
era5 %>%
tail(-3) %>%
mutate(stamp=with_tz(ymd_hms(paste(Date, `Time(UTC)`)), tzone='Brazil/East')) %>%
mutate(year=year(stamp), month=month(stamp,label=TRUE, abbr=FALSE)) %>%
group_by(year, month) %>%
summarize(speed = mean(c_ws, na.rm = T)) -> monthly.data
monthly.data <- ts(monthly.data$speed, start=c(2000,1), frequency=12)
monthly.data %>% autoplot()
ugarch_spec <- ugarchspec(variance.model = list(model='gjrGARCH', garchOrder = c(1,1)),
mean.model = list(armaOrder = c(1,0), include.mean = T),
distribution.model =  "sstd")
ugarch_spec
#fit <- ugarchfit(spec = ugarch_spec, data = hourly.data)#, solver = 'hybrid')
#defaults: ugarchforecast(fitORspec, data = NULL, n.ahead = 10, n.roll = 0, out.sample = 0)
monthly.data %>% length() #169
forecast.length <- 36
modelroll <- ugarchroll (
spec=ugarch_spec, data=monthly.data, n.ahead = 1, forecast.length = forecast.length,
n.start = NULL, refit.every = 4, refit.window = c("recursive"),
window.size = NULL, solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = T, VaR.alpha = c(0.3, 0.7, 0.1, 0.90),
cluster = NULL, keep.coef = F
)
measured <- monthly.data[(length(monthly.data)-4*forecast.length):length(monthly.data)-1]
length(monthly.data)
4*36
length(monthly.data)-4*forecast.length
(length(monthly.data)-4*forecast.length)
(length(monthly.data)-1)
length(measured)
length(monthly.data)-length(measured)
(length(monthly.data)-length(measured))/36
measured <- monthly.data[(length(monthly.data)-4*forecast.length):length(monthly.data)-1]
modelroll <- ugarchroll (
spec=ugarch_spec, data=monthly.data, n.ahead = 1, forecast.length = forecast.length,
n.start = NULL, refit.every = 4, refit.window = c("recursive"),
window.size = NULL, solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = T, VaR.alpha = c(0.3, 0.7, 0.1, 0.90),
cluster = NULL, keep.coef = F
)
modelroll <- ugarchroll (
spec=ugarch_spec, data=monthly.data, n.ahead = 1, forecast.length = forecast.length,
n.start = NULL, refit.every = 4, refit.window = c("recursive"),
window.size = NULL, solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = F, VaR.alpha = c(0.3, 0.7, 0.1, 0.90),
cluster = NULL, keep.coef = F
)
measured <- monthly.data[(length(monthly.data)-4*forecast.length):length(monthly.data)-1]
measured <- monthly.data[(length(monthly.data)-4*forecast.length):length(monthly.data)-1]
forecast.lower80 <- modelroll@forecast$VaR[,'alpha(30%)']
forecast.lower95 <- modelroll@forecast$VaR[,'alpha(10%)']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$VaR[,'alpha(70%)']
forecast.upper95 <- modelroll@forecast$VaR[,'alpha(90%)']
ggplot.data <- c(measured[1:length(measured)], forecast.mean)
type <- c(rep('measured', length(measured)), rep('forecast', length(forecast.mean)))
time <- c(1:length(measured), (length(measured)-length(forecast.mean)+1):length(measured))
nans <- rep(NA, length(measured))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
length(ggplot.data)
length(type)
length(time)
length(nans)
length(nans) + length(forecast.lower80)
length(nans) + length(forecast.upper80)
length(nans) + length(forecast.upper95)
length(nans) + length(forecast.lower95)
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
ggplot.data <- c(measured[1:length(measured)], forecast.mean)
type <- c(rep('measured', length(measured)), rep('forecast', length(forecast.mean)))
time <- c(1:length(measured), (length(measured)-length(forecast.mean)+1):length(measured))
nans <- rep(NA, length(measured))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
c(length(type), length(time), length(nans))
length(type)
length(measured)
length(forecast.lower80)
length(forecast.mean)
modelroll <- ugarchroll (
spec=ugarch_spec, data=monthly.data, n.ahead = 1, forecast.length = forecast.length,
n.start = NULL, refit.every = 4, refit.window = c("recursive"),
window.size = NULL, solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = T, VaR.alpha = c(0.3, 0.7, 0.1, 0.90),
cluster = NULL, keep.coef = F
)
measured <- monthly.data[(length(monthly.data)-4*forecast.length):length(monthly.data)-1]
measured <- monthly.data[(length(monthly.data)-4*forecast.length):length(monthly.data)-1]
forecast.lower80 <- modelroll@forecast$VaR[,'alpha(30%)']
forecast.lower95 <- modelroll@forecast$VaR[,'alpha(10%)']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$VaR[,'alpha(70%)']
forecast.lower80 <- modelroll@forecast$VaR[,'alpha(30%)']
forecast.lower95 <- modelroll@forecast$VaR[,'alpha(10%)']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$VaR[,'alpha(70%)']
forecast.upper95 <- modelroll@forecast$VaR[,'alpha(90%)']
ggplot.data <- c(measured[1:length(measured)], forecast.mean)
type <- c(rep('measured', length(measured)), rep('forecast', length(forecast.mean)))
time <- c(1:length(measured), (length(measured)-length(forecast.mean)+1):length(measured))
nans <- rep(NA, length(measured))
length(measured)
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(measured)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95% level'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80% level'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="fill") +
scale_color_manual(values = c('gold','black'))+
labs(x='Tempo', y='Velocidade (m/s)') +
ggtitle(title)
era5 <- read_table2(path, skip=9, comment="--")
era5 %>%
tail(-3) %>%
mutate(stamp=with_tz(ymd_hms(paste(Date, `Time(UTC)`)), tzone='Brazil/East')) %>%
mutate(year=year(stamp), month=month(stamp,label=TRUE, abbr=FALSE)) %>%
group_by(year, month) %>%
summarize(speed = mean(c_ws, na.rm = T)) -> monthly.data
monthly.data <- ts(monthly.data$speed, start=c(2000,1), frequency=12)
monthly.data %>% autoplot()
ugarch_spec <- ugarchspec(variance.model = list(model='gjrGARCH', garchOrder = c(1,1)),
mean.model = list(armaOrder = c(1,0), include.mean = T),
distribution.model =  "sstd")
ugarch_spec
#fit <- ugarchfit(spec = ugarch_spec, data = hourly.data)#, solver = 'hybrid')
#defaults: ugarchforecast(fitORspec, data = NULL, n.ahead = 10, n.roll = 0, out.sample = 0)
monthly.data %>% length() #169
forecast.length <- 36
modelroll <- ugarchroll (
spec=ugarch_spec, data=monthly.data, n.ahead = 1, forecast.length = forecast.length,
n.start = NULL, refit.every = 4, refit.window = c("recursive"),
window.size = NULL, solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = T, VaR.alpha = c(0.3, 0.7, 0.1, 0.90),
cluster = NULL, keep.coef = F
)
title <- paste('GARCH(1,1) com janela de 4 meses e passo de 1 mÃªs')
garch_plot(monthly.data, modelroll, title, 'garch_month.png')
garch_plot <- function(data, modelroll, title, filename){
measured <- data[(length(data)-4*forecast.length):length(data)-1]
forecast.lower80 <- modelroll@forecast$VaR[,'alpha(30%)']
forecast.lower95 <- modelroll@forecast$VaR[,'alpha(10%)']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$VaR[,'alpha(70%)']
forecast.upper95 <- modelroll@forecast$VaR[,'alpha(90%)']
ggplot.data <- c(measured[1:length(measured)], forecast.mean)
type <- c(rep('measured', length(measured)), rep('forecast', length(forecast.mean)))
time <- c(1:length(measured), (length(measured)-length(forecast.mean)+1):length(measured))
nans <- rep(NA, length(measured))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(measured)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95% level'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80% level'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="fill") +
scale_color_manual(values = c('gold','black'))+
labs(x='Tempo', y='Velocidade (m/s)') +
ggtitle(title)
ggsave(paste('thesis/images', filename, sep='/'))
print(my_accuracy(myforecast, measured))
}
str(modelroll@forecast$VaR)
title <- paste('GARCH(1,1) com janela de 50 horas e passo de 1 hora')
garch_plot(hourly.data, modelroll, title, 'garch_first.png')
era5 <- read_table2(path, skip=9, comment="--")
era5 %>%
tail(-3) %>%
mutate(stamp=with_tz(ymd_hms(paste(Date, `Time(UTC)`)), tzone='Brazil/East')) %>%
mutate(year=year(stamp), month=month(stamp,label=TRUE, abbr=FALSE)) %>%
group_by(year, month) %>%
summarize(speed = mean(c_ws, na.rm = T)) -> monthly.data
monthly.data <- ts(monthly.data$speed, start=c(2000,1), frequency=12)
monthly.data %>% autoplot()
ugarch_spec <- ugarchspec(variance.model = list(model='gjrGARCH', garchOrder = c(1,1)),
mean.model = list(armaOrder = c(1,0), include.mean = T),
distribution.model =  "sstd")
ugarch_spec
#fit <- ugarchfit(spec = ugarch_spec, data = hourly.data)#, solver = 'hybrid')
#defaults: ugarchforecast(fitORspec, data = NULL, n.ahead = 10, n.roll = 0, out.sample = 0)
monthly.data %>% length() #169
forecast.length <- 36
modelroll <- ugarchroll (
spec=ugarch_spec, data=monthly.data, n.ahead = 1, forecast.length = forecast.length,
n.start = NULL, refit.every = 4, refit.window = c("recursive"),
window.size = NULL, solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = T, VaR.alpha = c(0.3, 0.7, 0.1, 0.90),
cluster = NULL, keep.coef = F
)
title <- paste('GARCH(1,1) com janela de 4 meses e passo de 1 mÃªs')
garch_plot(monthly.data, modelroll, title, 'garch_month.png')
setwd('/home/diogo/Jupyter/tdef')
path <- '/home/diogo/Jupyter/tdef/Res025_ERA5.txt'
data <- read_table2(path, skip=9, comment="--") %>%
tail(-3) %>%
mutate(time=with_tz(ymd_hms(paste(Date, `Time(UTC)`)), tzone='Brazil/East')) %>%
mutate(hour=hour(time), day=date(time), month=month(time,label=TRUE, abbr=FALSE), year=year(time)) %>%
mutate(year_month = paste(year, month)) %>%
rename(speed=c_ws)
hourly.data <- data[(nrow(data)-365*24):nrow(data),]$speed
hourly.data %>% length()
ugarch_spec <- ugarchspec(variance.model = list(model='gjrGARCH', garchOrder = c(1,1)),
mean.model = list(armaOrder = c(1,0), include.mean = T),
distribution.model =  "sstd")
ugarch_spec
#fit <- ugarchfit(spec = ugarch_spec, data = hourly.data)#, solver = 'hybrid')
#defaults: ugarchforecast(fitORspec, data = NULL, n.ahead = 10, n.roll = 0, out.sample = 0)
hourly.data %>% length() #169
forecast.length <- 24*7
modelroll <- ugarchroll (
spec=ugarch_spec, data=hourly.data, n.ahead = 1, forecast.length = forecast.length,
n.start = NULL, refit.every = 50, refit.window = c("recursive"),
window.size = NULL, solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = T, VaR.alpha = c(0.3, 0.7, 0.1, 0.90),
cluster = NULL, keep.coef = F
)
garch_plot <- function(data, modelroll, title, filename){
measured <- data[(length(data)-2*forecast.length):length(data)-1]
forecast.lower80 <- modelroll@forecast$VaR[,'alpha(30%)']
forecast.lower95 <- modelroll@forecast$VaR[,'alpha(10%)']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$VaR[,'alpha(70%)']
forecast.upper95 <- modelroll@forecast$VaR[,'alpha(90%)']
ggplot.data <- c(measured[1:length(measured)], forecast.mean)
type <- c(rep('measured', length(measured)), rep('forecast', length(forecast.mean)))
time <- c(1:length(measured), (length(measured)-length(forecast.mean)+1):length(measured))
nans <- rep(NA, length(measured))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(measured)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95% level'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80% level'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="fill") +
scale_color_manual(values = c('gold','black'))+
labs(x='Tempo', y='Velocidade (m/s)') +
ggtitle(title)
ggsave(paste('thesis/images', filename, sep='/'))
print(my_accuracy(myforecast, measured))
}
str(modelroll@forecast$VaR)
title <- paste('GARCH(1,1) com janela de 50 horas e passo de 1 hora')
garch_plot(hourly.data, modelroll, title, 'garch_first.png')
ugarch_spec <- ugarchspec(variance.model = list(model='gjrGARCH', garchOrder = c(1,1)),
mean.model = list(armaOrder = c(1,0), include.mean = T),
distribution.model =  "sstd")
ugarch_spec
#fit <- ugarchfit(spec = ugarch_spec, data = hourly.data)#, solver = 'hybrid')
#defaults: ugarchforecast(fitORspec, data = NULL, n.ahead = 10, n.roll = 0, out.sample = 0)
monthly.data %>% length() #169
forecast.length <- 48
modelroll <- ugarchroll (
spec=ugarch_spec, data=monthly.data, n.ahead = 1, forecast.length = forecast.length,
n.start = NULL, refit.every = 4, refit.window = c("recursive"),
window.size = NULL, solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = T, VaR.alpha = c(0.3, 0.7, 0.1, 0.90),
cluster = NULL, keep.coef = F
)
title <- paste('GARCH(1,1) com janela de 4 meses e passo de 1 mÃªs')
garch_plot(monthly.data, modelroll, title, 'garch_month.png', 4)
measured <- monthly.data[(length(monthly.data)-4*forecast.length):length(monthly.data)-1]
garch_plot <- function(data, modelroll, title, filename, multiplier=2){
measured <- data[(length(data)-multiplier*forecast.length):length(data)-1]
forecast.lower80 <- modelroll@forecast$VaR[,'alpha(30%)']
forecast.lower95 <- modelroll@forecast$VaR[,'alpha(10%)']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$VaR[,'alpha(70%)']
forecast.upper95 <- modelroll@forecast$VaR[,'alpha(90%)']
ggplot.data <- c(measured[1:length(measured)], forecast.mean)
type <- c(rep('measured', length(measured)), rep('forecast', length(forecast.mean)))
time <- c(1:length(measured), (length(measured)-length(forecast.mean)+1):length(measured))
nans <- rep(NA, length(measured))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(measured)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95% level'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80% level'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="fill") +
scale_color_manual(values = c('gold','black'))+
labs(x='Tempo', y='Velocidade (m/s)') +
ggtitle(title)
ggsave(paste('thesis/images', filename, sep='/'))
print(my_accuracy(forecast.mean, measured))
}
garch_plot(monthly.data, modelroll, title, 'garch_month.png', 4)
modelroll
str(modelroll)
