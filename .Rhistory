forecast.lower95 <- c(forecast.lower95, result$lower[2])
forecast.mean <- c(forecast.mean, result$mean[1])
forecast.upper80 <- c(forecast.upper80, result$upper[1])
forecast.upper95 <- c(forecast.upper95, result$upper[2])
}
ggplot.data <- c(data[1:length(data)], forecast.mean)
type <- c(rep('measured', length(data)), rep('forecast', length(forecast.mean)))
time <- c(1:length(data), (length(data)-length(forecast.mean)+1):length(data))
nans <- rep(NA, length(data))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(data)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95% level'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80% level'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="fill") +
scale_color_manual(values = c('gold','black')) +
scale_alpha_discrete(c(0.5, 1))
}
plot_model(data$speed, c(1,0,0), 24*7*2, 24*7)
plot_model <- function(data, order, test.size, window.size){
forecast.horizon <- 1
data <- data[(length(data)-test.size):length(data)]
forecast.lower80 <- c()
forecast.lower95 <- c()
forecast.mean <- c()
forecast.upper80 <- c()
forecast.upper95 <- c()
for(k in 0:(length(data)-window.size)) {
train <- data[(1+k):(window.size+k)]
result <- forecast(Arima(ts(train), order=order), h=forecast.horizon)
forecast.lower80 <- c(forecast.lower80, result$lower[1])
forecast.lower95 <- c(forecast.lower95, result$lower[2])
forecast.mean <- c(forecast.mean, result$mean[1])
forecast.upper80 <- c(forecast.upper80, result$upper[1])
forecast.upper95 <- c(forecast.upper95, result$upper[2])
}
ggplot.data <- c(data[1:length(data)], forecast.mean)
type <- c(rep('measured', length(data)), rep('forecast', length(forecast.mean)))
time <- c(1:length(data), (length(data)-length(forecast.mean)+1):length(data))
nans <- rep(NA, length(data))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(data)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95% level'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80% level'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="fill") +
scale_color_manual(values = c('gold','black')) +
scale_alpha_manual(values = c(0.5, 1))
}
plot_model(data$speed, c(1,0,0), 24*7*2, 24*7)
plot_model <- function(data, order, test.size, window.size){
forecast.horizon <- 1
data <- data[(length(data)-test.size):length(data)]
forecast.lower80 <- c()
forecast.lower95 <- c()
forecast.mean <- c()
forecast.upper80 <- c()
forecast.upper95 <- c()
for(k in 0:(length(data)-window.size)) {
train <- data[(1+k):(window.size+k)]
result <- forecast(Arima(ts(train), order=order), h=forecast.horizon)
forecast.lower80 <- c(forecast.lower80, result$lower[1])
forecast.lower95 <- c(forecast.lower95, result$lower[2])
forecast.mean <- c(forecast.mean, result$mean[1])
forecast.upper80 <- c(forecast.upper80, result$upper[1])
forecast.upper95 <- c(forecast.upper95, result$upper[2])
}
ggplot.data <- c(data[1:length(data)], forecast.mean)
type <- c(rep('measured', length(data)), rep('forecast', length(forecast.mean)))
time <- c(1:length(data), (length(data)-length(forecast.mean)+1):length(data))
nans <- rep(NA, length(data))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(data)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95% level'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80% level'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="fill") +
scale_color_manual(values = c('gold','black')) +
scale_alpha_manual(values = c(0.1, 0.1))
}
plot_model(data$speed, c(1,0,0), 24*7*2, 24*7)
auto.arima(ts(data$speed))
plot_model(data$speed, c(5,1,1), 24*7*2, 24*7)
#seasonal plots
data
#12x24 plot
data %>%
group_by(month, hour) %>%
summarize(speed = mean(c_ws, na.rm = T)) %>%
rename(`Mês`=month, Hora=hour, Velocidade=c_ws) %>%
ggplot() + geom_line(aes(stamp, Velocidade))
#12x24 plot
data %>%
group_by(month, hour) %>%
summarize(speed = mean(speed, na.rm = T)) %>%
rename(`Mês`=month, Hora=hour, Velocidade=c_ws) %>%
ggplot() + geom_line(aes(stamp, Velocidade))
#12x24 plot
data %>%
group_by(month, hour) %>%
summarize(speed = mean(speed, na.rm = T)) %>%
ggplot() + geom_line(aes(hour, speed))
#12x24 plot
data %>%
group_by(month, hour) %>%
summarize(speed = mean(c_ws, na.rm = T)) %>%
ggplot() +
geom_smooth(aes(hour, speed, color=month), se = F) +
scale_x_discrete(limits=0:23) +
xlab('Tempo (hora)') + ylab('Velocidade (m/s)') +
ggtitle('12x24')
#12x24 plot
data %>%
group_by(month, hour) %>%
summarize(speed = mean(speed, na.rm = T)) %>%
ggplot() +
geom_smooth(aes(hour, speed, color=month), se = F) +
scale_x_discrete(limits=0:23) +
xlab('Tempo (hora)') + ylab('Velocidade (m/s)') +
ggtitle('12x24')
#12x24 plot
data %>%
group_by(month, hour) %>%
summarize(speed = mean(speed, na.rm = T)) %>%
ggplot() +
geom_smooth(aes(hour, speed, color=month), se = F) +
scale_x_discrete(limits=0:23) +
xlab('Hora') + ylab('Velocidade (m/s)') +
ggtitle('12x24')
#12x24 plot
data %>%
group_by(month, hour) %>%
summarize(speed = mean(speed, na.rm = T)) %>%
ggplot() +
geom_smooth(aes(hour, speed, color=month), se = F) +
scale_x_discrete(limits=0:23) +
labs(x = 'Hora', y='Velocidade (m/s)', color='Mês') +
ggtitle('12x24')
monthly.data <- data %>% group_by(year, month) %>%
summarize(speed = mean(c_ws, na.rm = T)) %>%
monthly.data <- ts(monthly.data$speed, start=c(2000,1), frequency=12)
monthly.data <- data %>% group_by(year, month) %>%
summarize(speed = mean(c_ws, na.rm = T)) %>%
monthly.data <- ts(monthly.data$speed, start=c(2000,1), frequency=12)
monthly.data <- data %>%
group_by(year, month) %>%
summarize(speed = mean(c_ws, na.rm = T))
monthly.data <- data %>%
group_by(year, month) %>%
summarize(speed = mean(speed, na.rm = T))
monthly.data <- ts(monthly.data$speed, start=c(2000,1), frequency=12)
monthly.data %>% ggseasonplot()
monthly.data %>% ggseasonplot(polar=T)
source('windrose.R')
data %>%
plot.windrose(spd = "speed", dir = "c_wd", spdmin=0) +
facet_wrap(~month) +
theme(axis.text.x = element_blank(), axis.title.x = element_blank(), axis.text.y = element_blank(), axis.title.y = element_blank(), axis.ticks.y = element_blank())
data %>%
plot.windrose(spd = "speed", dir = "c_wd", spdmin=0) +
theme(axis.text.y = element_blank(), axis.title.y = element_blank(), axis.ticks.y = element_blank())
data %>%
plot.windrose(spd = "speed", dir = "c_wd", spdmin=0) +
facet_wrap(~month) +
theme(axis.text.x = element_blank(), axis.title.x = element_blank(), axis.text.y = element_blank(), axis.title.y = element_blank(), axis.ticks.y = element_blank())
#auto.arima(ts(data$speed))
plot_model(data$speed, c(5,1,1), 24*7*2, 24*7)
#auto.arima(ts(data$speed))
plot_model(data$speed, c(1,1,0), 24*7*2, 24*7)
data %>%
group_by(year, month, hour) %>%
summarize(speed = mean(speed, na.rm = T)) %>%
ggplot() + geom_line(aes(hour, speed))
library(forecast)
library(tidyverse)
library(lubridate)
setwd('/home/diogo/Jupyter/tdef')
path <- '/home/diogo/Jupyter/tdef/Res025_ERA5.txt'
data <- read_table2(path, skip=9, comment="--") %>%
tail(-3) %>%
mutate(time=with_tz(ymd_hms(paste(Date, `Time(UTC)`)), tzone='Brazil/East')) %>%
mutate(hour=hour(time), day=date(time), month=month(time,label=TRUE, abbr=FALSE), year=year(time)) %>%
mutate(year_month = paste(year, month)) %>%
rename(speed=c_ws)
data[(nrow(data)-365*24*2):nrow(data),] %>%
mutate(time=as_date(time)) %>%
ggplot() + geom_line(aes(time, speed)) +
scale_x_date(date_labels = "%b %y", date_breaks = "month") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = 'Tempo (hora)', y = 'Velocidade (m/s)') +
ggtitle('Velocidade do vento em base horária')
ggsave('thesis/images/entire_series_hourly_basis.png')
data[(nrow(data)-365*24*2):nrow(data),] %>%
group_by(day) %>%
summarize(speed = mean(speed)) %>%
ggplot(aes(day, speed)) + geom_line() +
scale_x_date(date_labels = "%b %y", date_breaks = "month") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = 'Tempo (dia)', y = 'Velocidade (m/s)') +
ggtitle('Velocidade do vento em base diária')
ggsave('thesis/images/entire_series_daily_basis.png')
data[(nrow(data)-365*24*4):nrow(data),] %>%
#mutate(day = as_date(day)) %>%
group_by(month = floor_date(day, unit = "month")) %>%
summarize(speed = mean(speed, na.rm = T)) %>%
ggplot() + geom_line(aes(month, speed)) +
scale_x_date(date_labels = "%b %y", date_breaks = "2 months") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x='Tempo (mês)', y='Velocidade (m/s)') +
ggtitle('Velocidade do vento em base mensal')
ggsave('thesis/images/entire_series_monthly_basis.png')
data %>%
filter(year < 2019) %>%
group_by(year) %>%
summarize(speed = mean(speed, na.rm = T)) %>%
ggplot() + geom_line(aes(year, speed)) +
scale_x_continuous(breaks = 2000:2018) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x='Tempo (ano)', y='Velocidade (m/s)')
ggtitle('Velocidade do vento em base anual')
ggsave('thesis/images/entire_series_yearly_basis.png')
#I want to evaluate point forecasts using any arima model
#data <- data$speed
#order <- c(1,0,0)
#test.size <- 24*7*2
#window.size <- 24*7
plot_model <- function(data, order, test.size, window.size){
forecast.horizon <- 1
data <- data[(length(data)-test.size):length(data)]
forecast.lower80 <- c()
forecast.lower95 <- c()
forecast.mean <- c()
forecast.upper80 <- c()
forecast.upper95 <- c()
for(k in 0:(length(data)-window.size)) {
train <- data[(1+k):(window.size+k)]
result <- forecast(Arima(ts(train), order=order), h=forecast.horizon)
forecast.lower80 <- c(forecast.lower80, result$lower[1])
forecast.lower95 <- c(forecast.lower95, result$lower[2])
forecast.mean <- c(forecast.mean, result$mean[1])
forecast.upper80 <- c(forecast.upper80, result$upper[1])
forecast.upper95 <- c(forecast.upper95, result$upper[2])
}
ggplot.data <- c(data[1:length(data)], forecast.mean)
type <- c(rep('measured', length(data)), rep('forecast', length(forecast.mean)))
time <- c(1:length(data), (length(data)-length(forecast.mean)+1):length(data))
nans <- rep(NA, length(data))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(data)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95% level'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80% level'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="fill") +
scale_color_manual(values = c('gold','black'))
}
#auto.arima(ts(data$speed))
plot_model(data$speed, c(1,1,0), 24*7*2, 24*7)
ggsave('thesis/images/plot_model.png')
#seasonal plots
monthly.data <- data %>%
group_by(year, month) %>%
summarize(speed = mean(speed, na.rm = T))
monthly.data <- ts(monthly.data$speed, start=c(2000,1), frequency=12)
monthly.data %>% ggseasonplot()
ggsave('thesis/images/season_plot.png')
monthly.data %>% ggseasonplot(polar=T)
ggsave('thesis/images/season_plot_polar.png')
#12x24 plot
data %>%
group_by(month, hour) %>%
summarize(speed = mean(speed, na.rm = T)) %>%
ggplot() +
geom_smooth(aes(hour, speed, color=month), se = F) +
scale_x_discrete(limits=0:23) +
labs(x = 'Hora', y='Velocidade (m/s)', color='Mês') +
ggtitle('12x24')
ggsave('thesis/images/12x24plot.png')
#windroses
source('windrose.R')
data %>%
plot.windrose(spd = "speed", dir = "c_wd", spdmin=0) +
facet_wrap(~month) +
theme(axis.text.x = element_blank(), axis.title.x = element_blank(), axis.text.y = element_blank(), axis.title.y = element_blank(), axis.ticks.y = element_blank())
ggsave('thesis/images/windrose_monthly.png')
data %>%
plot.windrose(spd = "speed", dir = "c_wd", spdmin=0) +
theme(axis.text.y = element_blank(), axis.title.y = element_blank(), axis.ticks.y = element_blank())
ggsave('thesis/images/windrose.png')
models <- list()
i <- 1
for (p in 1:5){
for (d in c(0,1)){
print(c('running arima', p, d, 0))
models[[i]] <- Arima(ts.data, order=c(p,d,0))
i <- i+1
}
}
#TODO TOMORROW: HOW DO NTH POINTS FORECAST PERFORM?
#TODO TOMORROW: RUN MANY ARIMA MODELS AND COMPARE RESULTS
#DO THE SAME PLOT_MODEL FOR GARCH
window.size <- 24*7
forecast.horizon <- 1
raw.data <- era5$c_ws
library(tidyverse)
library(lubridate)
library(forecast)
library(urca)
library(fpp)
setwd('/home/diogo/Jupyter/tdef')
path <- '/home/diogo/Jupyter/tdef/Res025_ERA5.txt'
era5 <- read_table2(path, skip=9, comment="--")
tail(era5,-3) %>%
mutate(stamp=with_tz(ymd_hms(paste(Date, `Time(UTC)`)), tzone='Brazil/East')) %>%
mutate(hour=hour(stamp), month=month(stamp,label=TRUE, abbr=FALSE)) %>%
group_by(month, hour) %>%
summarize(speed = mean(c_ws, na.rm = T)) %>%
rename(`Mês`=month, Hora=hour, Velocidade=speed) %>%
ggplot() + geom_smooth(aes(Hora, Velocidade, color=`Mês`), se = F) + scale_x_discrete(limits=0:23)
tail(era5)
nsdiffs(era5$c_ws)
window.size <- 24*7
forecast.horizon <- 1
raw.data <- era5$c_ws
end <- length(raw.data)
start <- end-24*7*2
data <- raw.data[start:end]
forecast.lower80 <- c()
forecast.lower95 <- c()
forecast.mean <- c()
forecast.upper <- c()
forecast.upper80 <- c()
forecast.upper95 <- c()
p <- c()
d <- c()
q <- c()
for(k in 0:(length(data)-window.size)) {
train <- data[(1+k):(window.size+k)]
model <- auto.arima(train)
print(c(k,length(data)-window.size,as.character(model)))
result <- forecast(model, h=forecast.horizon)
forecast.lower80 <- c(forecast.lower80, result$lower[1])
forecast.lower95 <- c(forecast.lower95, result$lower[2])
forecast.mean <- c(forecast.mean, result$mean[1])
forecast.upper80 <- c(forecast.upper80, result$upper[1])
forecast.upper95 <- c(forecast.upper95, result$upper[2])
r <- str_match(as.character(model), "ARIMA\\((\\d),(\\d),(\\d)\\)")
p <- c(p, r[2])
d <- c(d, r[3])
q <- c(q, r[4])
}
#measured.series <- ts(data)
#forecast.mean$lower <- forecast.lower
#forecast.mean$upper <- forecast.upper
result <- c()
result$x <-ts(data)
result$mean <- ts(forecast.mean, start=window.size)
result$lower <- ts.union('80%'=ts(forecast.lower80, start=window.size), '95%'=ts(forecast.lower95, start=window.size))
result$upper <- ts.union('80%'=ts(forecast.upper80, start=window.size), '95%'=ts(forecast.upper95, start=window.size))
result$level <- c(80, 95)
class(result) <- "forecast"
result %>%  autoplot(series='Forecast') +
autolayer(ts(data), series = 'Measured')
ggplot.data <- c(data, forecast.mean)
type <- c(rep('measured', length(data)), rep('forecast', length(forecast.mean)))
time <- c(1:length(data), (length(data)-length(forecast.mean)+1):length(data))
nans <- rep(NA, length(data))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(data)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
#geom_ribbon(aes(ymin=lower95, ymax=upper95), fill = '#C3C3F6') +
#geom_ribbon(aes(ymin=lower80, ymax=upper80), fill = '#7D7DEF') +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95% level'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80% level'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="fill") +
scale_color_manual(values = c('gold','black'))
#I want to evaluate point forecasts using any arima model
#data <- data$speed
#order <- c(1,0,0)
#test.size <- 24*7*2
#window.size <- 24*7
results
sp500ret
library(rugarch)
model<-ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = FALSE),
distribution.model = "norm")
modelfit<-ugarchfit(spec=model,data=monthly.data)
plot(modelfit)
spec = getspec(modelfit);
setfixed(spec) <- as.list(coef(modelfit));
monthly.data
forecast = ugarchforecast(spec, n.ahead = 1, n.roll = 10, data = monthly.data, out.sample = 10);
sigma(forecast);
fitted(forecast)
plot(forecast)
plot(forecast, which=2)
library(rugarch)
model<-ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 1), include.mean = T),
distribution.model = "norm")
modelfit<-ugarchfit(spec=model,data=monthly.data)
spec = getspec(modelfit);
setfixed(spec) <- as.list(coef(modelfit));
forecast = ugarchforecast(spec, n.ahead = 1, n.roll = 10, data = monthly.data, out.sample = 10);
sigma(forecast);
fitted(forecast)
plot(forecast, which=2)
modelfit<-ugarchfit(spec=model,data=monthly.data)
spec = getspec(modelfit);
setfixed(spec) <- as.list(coef(modelfit));
forecast = ugarchforecast(spec, n.ahead = 1, n.roll = 4, data = monthly.data, out.sample = 4);
sigma(forecast);
fitted(forecast)
plot(forecast, which=2)
forecast = ugarchforecast(spec, n.ahead = 1, n.roll = 5, data = monthly.data, out.sample = 4);
forecast = ugarchforecast(spec, n.ahead = 1, n.roll = 5, data = monthly.data, out.sample = 6);
sigma(forecast);
fitted(forecast)
plot(forecast, which=2)
forecast = ugarchforecast(spec, n.ahead = 1, n.roll = 5, data = monthly.data, out.sample = 20);
sigma(forecast);
fitted(forecast)
plot(forecast, which=2)
forecast = ugarchforecast(spec, n.ahead = 1, n.roll = 5, data = monthly.data, out.sample = 5);
sigma(forecast);
fitted(forecast)
plot(forecast, which=2)
forecast = ugarchforecast(spec, n.ahead = 1, n.roll = 20, data = monthly.data, out.sample = 20);
sigma(forecast);
fitted(forecast)
plot(forecast, which=2)
forecast = ugarchforecast(spec, n.ahead = 1, n.roll = 30, data = monthly.data, out.sample = 40);
sigma(forecast);
fitted(forecast)
plot(forecast, which=2)
model<-ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = T),
distribution.model = "norm")
modelfit<-ugarchfit(spec=model,data=monthly.data)
spec = getspec(modelfit);
setfixed(spec) <- as.list(coef(modelfit));
forecast = ugarchforecast(spec, n.ahead = 1, n.roll = 30, data = monthly.data, out.sample = 40);
sigma(forecast);
fitted(forecast)
plot(forecast, which=2)
library(rugarch)
model<-ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0), include.mean = T),
distribution.model = "norm")
modelfit<-ugarchfit(spec=model,data=monthly.data)
spec = getspec(modelfit);
setfixed(spec) <- as.list(coef(modelfit));
forecast = ugarchforecast(spec, n.ahead = 1, n.roll = 30, data = monthly.data, out.sample = 40);
sigma(forecast);
fitted(forecast)
plot(forecast, which=2)
library(rugarch)
model<-ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(2, 0), include.mean = T),
distribution.model = "norm")
modelfit<-ugarchfit(spec=model,data=monthly.data)
spec = getspec(modelfit);
setfixed(spec) <- as.list(coef(modelfit));
forecast = ugarchforecast(spec, n.ahead = 1, n.roll = 30, data = monthly.data, out.sample = 40);
sigma(forecast);
fitted(forecast)
plot(forecast, which=2)
forecast = ugarchforecast(spec, n.ahead = 1, n.roll = 2, data = monthly.data, out.sample = 40);
sigma(forecast);
fitted(forecast)
plot(forecast, which=2)
forecast = ugarchforecast(spec, n.ahead = 1, n.roll = 2, data = monthly.data)#, out.sample = 40);
sigma(forecast);
fitted(forecast)
plot(forecast, which=2)
forecast = ugarchforecast(spec, n.ahead = 1, n.roll = 5, data = monthly.data)#, out.sample = 40);
sigma(forecast);
fitted(forecast)
plot(forecast, which=2)
modelfit<-ugarchfit(spec=model,data=monthly.data)
spec = getspec(modelfit);
setfixed(spec) <- as.list(coef(modelfit));
forecast = ugarchforecast(spec, n.ahead = 1, n.roll = 5, data = monthly.data)#, out.sample = 40);
sigma(forecast);
fitted(forecast)
plot(forecast, which=2)
modelfit<-ugarchfit(spec=model,data=monthly.data)
spec = getspec(modelfit);
setfixed(spec) <- as.list(coef(modelfit));
forecast = ugarchforecast(spec, n.ahead = 1, n.roll = 6, data = monthly.data)#, out.sample = 40);
sigma(forecast);
fitted(forecast)
plot(forecast, which=2)
forecast = ugarchforecast(spec, n.ahead = 1, n.roll = 10, data = monthly.data)#, out.sample = 40);
sigma(forecast);
fitted(forecast)
plot(forecast, which=2)
