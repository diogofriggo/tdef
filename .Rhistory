guides(colour=guide_legend(title="Daily forecasts"))
fc <- hw(subset(hyndsight,end=length(hyndsight)-120),
damped = TRUE, seasonal="multiplicative", h=120)
autoplot(hyndsight) +
autolayer(fc, series="HW multi damped", PI=FALSE)+
guides(colour=guide_legend(title="Daily forecasts"))
fc <- hw(subset(hyndsight,end=length(hyndsight)-120),
damped = F, seasonal="multiplicative", h=120)
fc <- hw(subset(hyndsight,end=length(hyndsight)-120),
damped = F, seasonal="multiplicative", h=120)
autoplot(hyndsight) +
autolayer(fc, series="HW multi damped", PI=FALSE)+
guides(colour=guide_legend(title="Daily forecasts"))
fc <- hw(subset(hyndsight,end=length(hyndsight)-120),
damped = F, seasonal="additive", h=120)
autoplot(hyndsight) +
autolayer(fc, series="HW multi damped", PI=FALSE)+
guides(colour=guide_legend(title="Daily forecasts"))
aust <- window(austourists, end=2008)
fit1 <- hw(aust, seasonal="additive", h=32, damped=F)
fit2 <- hw(aust, seasonal="multiplicative", h=32, damped=F)
autoplot(austourists) +
autolayer(fit1, series="HW additive forecasts", PI=F) +
autolayer(fit2, series="HW multiplicative forecasts", PI=F) +
ylab("Visitor nights (millions)") +
ggtitle("International visitors nights in Australia") +
guides(colour=guide_legend(title="Forecast"))
l <- 120
fc <- hw(subset(hyndsight, end=length(hyndsight)-l), damped=F, seasonal="multiplicative", h=l)
autoplot(hyndsight) +
autolayer(fc, series="HW multi damped", PI=F) +
guides(colour=guide_legend(title="Daily forecasts"))
aust <- window(austourists, start=2005)
fit <- ets(aust)
summary(fit)
autoplot(fit)
cbind('Residuals' = residuals(fit),
'Forecast errors'= residuals(fit, type='response')) %>%
autoplot(facet=T + xlab('Year') + ylab(''))
cbind('Residuals' = residuals(fit),
'Forecast errors'= residuals(fit, type='response')) %>%
autoplot(facet=T + xlab('Year') + ylab(''))
cbind('Residuals' = residuals(fit), 'Forecast errors'= residuals(fit, type='response')) %>%
autoplot(facet=T) + xlab('Year') + ylab('')
fit %>% forecast(h=8) %>% autoplot() +
ylab("International visitor night in Australia (millions)")
fit %>% forecast(h=8) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data", PI=F) +
ylab("International visitor night in Australia (millions)")
aust <- window(austourists, end=2010)
fit <- ets(aust)
fit %>% forecast(h=8) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data", PI=F) +
ylab("International visitor night in Australia (millions)")
fit %>% forecast(h=20) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data", PI=F) +
ylab("International visitor night in Australia (millions)")
fit %>% forecast(h=20) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data", PI=F) +
ylab("International visitor night in Australia (millions)")
aust <- window(austourists, end=2000)
aust <- window(austourists, end=2000)
fit <- ets(aust)
fit %>% forecast(h=20) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data", PI=F) +
ylab("International visitor night in Australia (millions)")
aust <- window(austourists, end=2002)
fit <- ets(aust)
fit %>% forecast(h=20) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data", PI=F) +
ylab("International visitor night in Australia (millions)")
aust <- window(austourists, end=2004)
fit <- ets(aust)
fit %>% forecast(h=20) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data") +
ylab("International visitor night in Australia (millions)")
austourists
aust <- window(austourists, end=2008)
fit <- ets(aust)
fit %>% forecast(h=20) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data") +
ylab("International visitor night in Australia (millions)")
fit %>% forecast(h=40) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data") +
ylab("International visitor night in Australia (millions)")
fit %>% forecast(h=35) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data") +
ylab("International visitor night in Australia (millions)")
aust <- window(austourists, end=2006)
fit <- ets(aust)
fit %>% forecast(h=35) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data") +
ylab("International visitor night in Australia (millions)")
aust <- window(austourists, end=2005)
fit <- ets(aust)
fit %>% forecast(h=35) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data") +
ylab("International visitor night in Australia (millions)")
aust <- window(austourists, end=2007)
fit <- ets(aust)
fit %>% forecast(h=35) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data") +
ylab("International visitor night in Australia (millions)")
aust <- window(austourists, end=2008)
fit <- ets(aust)
fit %>% forecast(h=35) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data") +
ylab("International visitor night in Australia (millions)")
Box.test(diff(goog200), lag=10, type='Ljung-Box')
gridExtra::grid.arrange(ggAcf(goog200), ggAcf(diff(goog200)))
a10
cbind("Sales ($million)" = a10,
"Monthly log sales" = log(a10),
"Annual change in log sales" = diff(log(a10), 12)) %>%
autoplot(facet=T) + xlab("Year") + ylab("") +
ggtitle("Antidiabetic drug sales")
gridExtra::grid.arrange(ggAcf(a10), ggAcf(log(a10)), ggAcf(diff(log(a10), 12))
gridExtra::grid.arrange(ggAcf(a10), ggAcf(log(a10)), ggAcf(diff(log(a10), 12)))
gridExtra::grid.arrange(
ggAcf(a10),
ggAcf(log(a10)),
ggAcf(diff(log(a10), 12)),nrow=3)
lag = 20
Box.test(a10, lag=lag, type='Ljung-Box')
Box.test(log(a10), lag=lag, type='Ljung-Box')
Box.test(diff(log(a10), 12)), lag=lag, type='Ljung-Box')
lag = 20
Box.test(a10, lag=lag, type='Ljung-Box')
Box.test(log(a10), lag=lag, type='Ljung-Box')
Box.test(diff(log(a10), 12), lag=lag, type='Ljung-Box')
lag = 1
Box.test(a10, lag=lag, type='Ljung-Box')
Box.test(log(a10), lag=lag, type='Ljung-Box')
Box.test(diff(log(a10), 12), lag=lag, type='Ljung-Box')
cbind("Billion Kwh" = usmelec,
"Logs" = log(usmelec),
"Seasonally\n differenced logs" = diff(log(usmelec), 12),
"Doubly\n differenced logs" = diff(diff(log(usmelec), 12))) %>%
autoplot(facets=T) +
xlab("Year") + ylab("") +
ggtitle("Monthly US net electricity generation")
library(urca)
goog %>% ur.kpss() %>% summary()
goog %>% diff() %>% ur.kpss() %>% summary()
ndiffs(goog)
nsdiffs(goog)
nsdiffs(elecsales)
nsdiffs(elecequip)
usmelec %>% nsdiffs()
usmelec %>% diff() %>% nsdiffs()
usmelec %>% nsdiffs()
usmelec %>% diff(lag=12) %>% nsdiffs()
usmelec %>% log() %>% nsdiffs()
usmelec %>% log() %>% diff(lag=12) %>% nsdiffs()
library(tidyverse)
library(forecast)
library(FinTS)
library(tseries)
library(rugarch)
#library(PerformanceAnalytics)
library(chron)
#install.packages('PerformanceAnalytics')
set.seed(321)
rnorm(500) %>% tsdisplay()
rnorm(500)^2 %>% tsdisplay()
rnorm(500) %>% ts() %>% autoplot()
rnorm(500) %>% checkresiduals()
rnorm(500) %>% ggAcf()
rnorm(500) %>% ggPacf()
#install.packages('FinTS')
data(m.intc7303)
str(m.intc7303)
head(m.intc7303)
plot(m.intc7303)
m.intc7303 %>% ts() %>% autoplot()
m.intc7303 %>% as.ts() %>% ggseasonplot()
m.intc7303 %>% as.ts() %>% ggtsdisplay()
ArchTest(log(1+as.numeric(m.intc7303)), lag=12)
m.intc7303^2 %>% as.ts() %>% ggtsdisplay()
ArchTest(log(1+as.numeric(m.intc7303)), lag=1, demean=T)
ArchTest(log(1+as.numeric(m.intc7303)), lag=2, demean=T)
ArchTest(log(1+as.numeric(m.intc7303)), lag=3, demean=T)
ArchTest(log(1+as.numeric(m.intc7303)), lag=4, demean=T)
library(tidyverse)
library(lubridate)
library(rugarch)
library(forecast)
setwd('/home/diogo/Jupyter/tdef')
path <- '/home/diogo/Jupyter/tdef/Res025_ERA5.txt'
data <- read_table2(path, skip=9, comment="--") %>%
tail(-3) %>%
mutate(time=with_tz(ymd_hms(paste(Date, `Time(UTC)`)), tzone='Brazil/East')) %>%
mutate(hour=hour(time), day=date(time), month=month(time,label=TRUE, abbr=FALSE), year=year(time)) %>%
mutate(year_month = paste(year, month)) %>%
rename(speed=c_ws)
hourly.data <- data[(nrow(data)-365*24):nrow(data),]$speed
hourly.data %>% length()
ugarch_spec <- ugarchspec(variance.model = list(model='gjrGARCH', garchOrder = c(1,1)),
mean.model = list(armaOrder = c(1,0), include.mean = T),
distribution.model =  "sstd")
ugarch_spec
#fit <- ugarchfit(spec = ugarch_spec, data = hourly.data)#, solver = 'hybrid')
#defaults: ugarchforecast(fitORspec, data = NULL, n.ahead = 10, n.roll = 0, out.sample = 0)
hourly.data %>% length() #169
forecast.length <- 24*7
modelroll <- ugarchroll (
spec=ugarch_spec, data=hourly.data, n.ahead = 1, forecast.length = forecast.length,
n.start = NULL, refit.every = 50, refit.window = c("recursive"),
window.size = NULL, solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = T, VaR.alpha = c(0.05, 0.1, 0.2, 0.4),
cluster = NULL, keep.coef = F
)
#modelroll %>% plot(which=3)
measured <- hourly.data[(length(hourly.data)-2*forecast.length):length(hourly.data)-1]
myforecast <- modelroll@forecast$density[,'Mu']
forecast.lower80 <- modelroll@forecast$density[,'Mu']
forecast.lower95 <- modelroll@forecast$density[,'Mu']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$density[,'Mu']
forecast.upper95 <- modelroll@forecast$density[,'Mu']
str(modelroll)
modelroll@forecast$Var[,'alpha(5%)']
modelroll@forecast$Var
modelroll@forecast
modelroll@forecast$VaR[,'alpha(5%)']
str(modelroll)
#modelroll %>% plot(which=3)
measured <- hourly.data[(length(hourly.data)-2*forecast.length):length(hourly.data)-1]
forecast.lower80 <- modelroll@forecast$VaR[,'alpha(20%)']
forecast.lower95 <- modelroll@forecast$VaR[,'alpha(5%)']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$VaR[,'alpha(40%)']
forecast.upper95 <- modelroll@forecast$VaR[,'alpha(10%)']
ggplot.data <- c(data[1:length(measured)], forecast.mean)
type <- c(rep('measured', length(measured)), rep('forecast', length(forecast.mean)))
#modelroll %>% plot(which=3)
measured <- hourly.data[(length(hourly.data)-2*forecast.length):length(hourly.data)-1]
forecast.lower80 <- modelroll@forecast$VaR[,'alpha(20%)']
forecast.lower95 <- modelroll@forecast$VaR[,'alpha(5%)']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$VaR[,'alpha(40%)']
forecast.upper95 <- modelroll@forecast$VaR[,'alpha(10%)']
ggplot.data <- c(measured[1:length(measured)], forecast.mean)
type <- c(rep('measured', length(measured)), rep('forecast', length(forecast.mean)))
time <- c(1:length(data), (length(measured)-length(forecast.mean)+1):length(measured))
nans <- rep(NA, length(measured))
df <- tibble(time=1:length(measured),speed=measured,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
#modelroll %>% plot(which=3)
measured <- hourly.data[(length(hourly.data)-2*forecast.length):length(hourly.data)-1]
forecast.lower80 <- modelroll@forecast$VaR[,'alpha(20%)']
forecast.lower95 <- modelroll@forecast$VaR[,'alpha(5%)']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$VaR[,'alpha(40%)']
forecast.upper95 <- modelroll@forecast$VaR[,'alpha(10%)']
ggplot.data <- c(measured[1:length(measured)], forecast.mean)
type <- c(rep('measured', length(measured)), rep('forecast', length(forecast.mean)))
time <- c(1:length(data), (length(measured)-length(forecast.mean)+1):length(measured))
nans <- rep(NA, length(measured))
measured <- hourly.data[(length(hourly.data)-2*forecast.length):length(hourly.data)-1]
forecast.lower80 <- modelroll@forecast$VaR[,'alpha(20%)']
forecast.lower95 <- modelroll@forecast$VaR[,'alpha(5%)']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$VaR[,'alpha(40%)']
forecast.upper95 <- modelroll@forecast$VaR[,'alpha(10%)']
ggplot.data <- c(measured[1:length(measured)], forecast.mean)
type <- c(rep('measured', length(measured)), rep('forecast', length(forecast.mean)))
time <- c(1:length(data), (length(measured)-length(forecast.mean)+1):length(measured))
nans <- rep(NA, length(measured))
df1 <- tibble(time=1:len(), speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
measured <- hourly.data[(length(hourly.data)-2*forecast.length):length(hourly.data)-1]
forecast.lower80 <- modelroll@forecast$VaR[,'alpha(20%)']
forecast.lower95 <- modelroll@forecast$VaR[,'alpha(5%)']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$VaR[,'alpha(40%)']
forecast.upper95 <- modelroll@forecast$VaR[,'alpha(10%)']
ggplot.data <- c(measured[1:length(measured)], forecast.mean)
type <- c(rep('measured', length(measured)), rep('forecast', length(forecast.mean)))
measured <- hourly.data[(length(hourly.data)-2*forecast.length):length(hourly.data)-1]
forecast.lower80 <- modelroll@forecast$VaR[,'alpha(20%)']
forecast.lower95 <- modelroll@forecast$VaR[,'alpha(5%)']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$VaR[,'alpha(40%)']
forecast.upper95 <- modelroll@forecast$VaR[,'alpha(10%)']
ggplot.data <- c(measured[1:length(measured)], forecast.mean)
type <- c(rep('measured', length(measured)), rep('forecast', length(forecast.mean)))
time <- c(1:length(measured), (length(measured)-length(forecast.mean)+1):length(measured))
nans <- rep(NA, length(measured))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(measured)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95% level'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80% level'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="fill") +
scale_color_manual(values = c('gold','black'))
garch_plot <- function(hourly.data, modelroll){
measured <- hourly.data[(length(hourly.data)-2*forecast.length):length(hourly.data)-1]
forecast.lower80 <- modelroll@forecast$VaR[,'alpha(40%)']
forecast.lower95 <- modelroll@forecast$VaR[,'alpha(10%)']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$VaR[,'alpha(20%)']
forecast.upper95 <- modelroll@forecast$VaR[,'alpha(5%)']
ggplot.data <- c(measured[1:length(measured)], forecast.mean)
type <- c(rep('measured', length(measured)), rep('forecast', length(forecast.mean)))
time <- c(1:length(measured), (length(measured)-length(forecast.mean)+1):length(measured))
nans <- rep(NA, length(measured))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(measured)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95% level'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80% level'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="fill") +
scale_color_manual(values = c('gold','black'))
ggsave('thesis/images/garch_first.png')
print(my_accuracy(myforecast, measured))
}
garch_plot(hourly.data, modelroll)
garch_plot(hourly.data, modelroll)
garch_plot <- function(hourly.data, modelroll){
measured <- hourly.data[(length(hourly.data)-2*forecast.length):length(hourly.data)-1]
forecast.lower80 <- modelroll@forecast$VaR[,'alpha(40%)']
forecast.lower95 <- modelroll@forecast$VaR[,'alpha(10%)']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$VaR[,'alpha(20%)']
forecast.upper95 <- modelroll@forecast$VaR[,'alpha(5%)']
ggplot.data <- c(measured[1:length(measured)], forecast.mean)
type <- c(rep('measured', length(measured)), rep('forecast', length(forecast.mean)))
time <- c(1:length(measured), (length(measured)-length(forecast.mean)+1):length(measured))
nans <- rep(NA, length(measured))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(measured)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95% level'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80% level'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="fill") +
scale_color_manual(values = c('gold','black'))
#ggsave('thesis/images/garch_first.png')
#print(my_accuracy(myforecast, measured))
}
garch_plot(hourly.data, modelroll)
str(modelroll@forecast$VaR)
garch_plot <- function(hourly.data, modelroll){
measured <- hourly.data[(length(hourly.data)-2*forecast.length):length(hourly.data)-1]
forecast.lower80 <- modelroll@forecast$VaR[,'alpha(90%)']
forecast.lower95 <- modelroll@forecast$VaR[,'alpha(95%)']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$VaR[,'alpha(99%)']
forecast.upper95 <- modelroll@forecast$VaR[,'alpha(1%)']
ggplot.data <- c(measured[1:length(measured)], forecast.mean)
type <- c(rep('measured', length(measured)), rep('forecast', length(forecast.mean)))
time <- c(1:length(measured), (length(measured)-length(forecast.mean)+1):length(measured))
nans <- rep(NA, length(measured))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(measured)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95% level'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80% level'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="fill") +
scale_color_manual(values = c('gold','black'))
#ggsave('thesis/images/garch_first.png')
#print(my_accuracy(myforecast, measured))
}
str(modelroll@forecast$VaR)
garch_plot(hourly.data, modelroll)
modelroll <- ugarchroll (
spec=ugarch_spec, data=hourly.data, n.ahead = 1, forecast.length = forecast.length,
n.start = NULL, refit.every = 50, refit.window = c("recursive"),
window.size = NULL, solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = T, VaR.alpha = c(0.9, 0.95, 0.99, 0.01),
cluster = NULL, keep.coef = F
)
garch_plot <- function(hourly.data, modelroll){
measured <- hourly.data[(length(hourly.data)-2*forecast.length):length(hourly.data)-1]
forecast.lower80 <- modelroll@forecast$VaR[,'alpha(90%)']
forecast.lower95 <- modelroll@forecast$VaR[,'alpha(95%)']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$VaR[,'alpha(99%)']
forecast.upper95 <- modelroll@forecast$VaR[,'alpha(1%)']
ggplot.data <- c(measured[1:length(measured)], forecast.mean)
type <- c(rep('measured', length(measured)), rep('forecast', length(forecast.mean)))
time <- c(1:length(measured), (length(measured)-length(forecast.mean)+1):length(measured))
nans <- rep(NA, length(measured))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(measured)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95% level'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80% level'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="fill") +
scale_color_manual(values = c('gold','black'))
#ggsave('thesis/images/garch_first.png')
#print(my_accuracy(myforecast, measured))
}
str(modelroll@forecast$VaR)
garch_plot(hourly.data, modelroll)
modelroll <- ugarchroll (
spec=ugarch_spec, data=hourly.data, n.ahead = 1, forecast.length = forecast.length,
n.start = NULL, refit.every = 50, refit.window = c("recursive"),
window.size = NULL, solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = T, VaR.alpha = c(0.3, 0.7, 0.45, 0.95),
cluster = NULL, keep.coef = F
)
garch_plot <- function(hourly.data, modelroll){
measured <- hourly.data[(length(hourly.data)-2*forecast.length):length(hourly.data)-1]
forecast.lower80 <- modelroll@forecast$VaR[,'alpha(30%)']
forecast.lower95 <- modelroll@forecast$VaR[,'alpha(45%)']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$VaR[,'alpha(70%)']
forecast.upper95 <- modelroll@forecast$VaR[,'alpha(95%)']
ggplot.data <- c(measured[1:length(measured)], forecast.mean)
type <- c(rep('measured', length(measured)), rep('forecast', length(forecast.mean)))
time <- c(1:length(measured), (length(measured)-length(forecast.mean)+1):length(measured))
nans <- rep(NA, length(measured))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(measured)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95% level'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80% level'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="fill") +
scale_color_manual(values = c('gold','black'))
#ggsave('thesis/images/garch_first.png')
#print(my_accuracy(myforecast, measured))
}
str(modelroll@forecast$VaR)
garch_plot(hourly.data, modelroll)
era5 <- read_table2(path, skip=9, comment="--")
modelroll <- ugarchroll (
spec=ugarch_spec, data=hourly.data, n.ahead = 1, forecast.length = forecast.length,
n.start = NULL, refit.every = 50, refit.window = c("recursive"),
window.size = NULL, solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = T, VaR.alpha = c(0.3, 0.7, 0.05, 0.95),
cluster = NULL, keep.coef = F
)
garch_plot <- function(hourly.data, modelroll){
measured <- hourly.data[(length(hourly.data)-2*forecast.length):length(hourly.data)-1]
forecast.lower80 <- modelroll@forecast$VaR[,'alpha(30%)']
forecast.lower95 <- modelroll@forecast$VaR[,'alpha(5%)']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$VaR[,'alpha(70%)']
forecast.upper95 <- modelroll@forecast$VaR[,'alpha(95%)']
ggplot.data <- c(measured[1:length(measured)], forecast.mean)
type <- c(rep('measured', length(measured)), rep('forecast', length(forecast.mean)))
time <- c(1:length(measured), (length(measured)-length(forecast.mean)+1):length(measured))
nans <- rep(NA, length(measured))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(measured)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95% level'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80% level'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="fill") +
scale_color_manual(values = c('gold','black'))
#ggsave('thesis/images/garch_first.png')
#print(my_accuracy(myforecast, measured))
}
str(modelroll@forecast$VaR)
garch_plot(hourly.data, modelroll)
modelroll <- ugarchroll (
spec=ugarch_spec, data=hourly.data, n.ahead = 1, forecast.length = forecast.length,
n.start = NULL, refit.every = 50, refit.window = c("recursive"),
window.size = NULL, solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = T, VaR.alpha = c(0.3, 0.7, 0.1, 0.90),
cluster = NULL, keep.coef = F
)
garch_plot <- function(hourly.data, modelroll){
measured <- hourly.data[(length(hourly.data)-2*forecast.length):length(hourly.data)-1]
forecast.lower80 <- modelroll@forecast$VaR[,'alpha(30%)']
forecast.lower95 <- modelroll@forecast$VaR[,'alpha(10%)']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$VaR[,'alpha(70%)']
forecast.upper95 <- modelroll@forecast$VaR[,'alpha(90%)']
ggplot.data <- c(measured[1:length(measured)], forecast.mean)
type <- c(rep('measured', length(measured)), rep('forecast', length(forecast.mean)))
time <- c(1:length(measured), (length(measured)-length(forecast.mean)+1):length(measured))
nans <- rep(NA, length(measured))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(measured)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95% level'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80% level'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="fill") +
scale_color_manual(values = c('gold','black'))
#ggsave('thesis/images/garch_first.png')
#print(my_accuracy(myforecast, measured))
}
str(modelroll@forecast$VaR)
garch_plot(hourly.data, modelroll)
